import java.time.LocalDate
import java.time.format.DateTimeFormatter
import java.time.format.ResolverStyle

plugins {
    id 'java'
    id 'groovy'
    id 'de.seitenbau.serviceportal.prozesspipeline' version '2024.11.28-0'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.codehaus.groovy:groovy-all:2.5.22'

    // Include commons subproject
    // i.e. compile project(':commons.serviceportal')

    // Include to use latest scripting api version
    // implementation 'de.seitenbau.serviceportal:prozess-scripting-api:1.+'
}

// Set source directories (where to compile and test from)
sourceSets {
    main {
        groovy {
            srcDirs = ['scripts']
        }
        resources {
            srcDirs = ['scripts']
        }
    }
    test {
        groovy {
            srcDirs = ['test']
        }
        resources {
            srcDirs = ['test']
        }
    }
}

// Enable logging of test results
//test {
//    testLogging {
//        events 'passed', 'skipped', 'failed'
//    }
//}

// Ermittelt für eine Variable Wert bzw. setzt den Defaultwert wenn nicht vorhanden
def getVariableValue(String name, defaultValue = null) {
    return project.hasProperty(name) ? project.property(name) : defaultValue
}

def getVariableValueAsLocalDate(String name) {
    try {
        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern('dd.MM.uuuu')
        String stringValue = getVariableValue(name)
        return stringValue == null ? null : LocalDate.parse(stringValue,
                dateTimeFormatter.withResolverStyle(ResolverStyle.STRICT))
    } catch (Exception e) {
        throw new RuntimeException("Der Parameter '" + name
                + "' konnte nicht als Datum interpretiert werden: " + e.getMessage());
    }
}

mergeScripts {
    environment = getVariableValue('environment', 'default')
    debug = getVariableValue('debug', false)
}

buildModel {
    environment = getVariableValue('environment', 'default')
    debug = getVariableValue('debug', false)
    dependsOn 'mergeScripts'
}

uploadProcessModelFiles {
    environment = getVariableValue('environment', 'default')
    debug = getVariableValue('debug', false)
}

uploadFormularFiles {
    environment = getVariableValue('environment', 'default')
    debug = getVariableValue('debug', false)
}

uploadAndDeployFormularFiles {
    environment = getVariableValue('environment', 'default')
    debug = getVariableValue('debug', false)
}

deployProcessModelVersion {
    environment = getVariableValue('environment', 'default')
    debug = getVariableValue('debug', false)
}

uploadParameterDefinition {
    environment = getVariableValue('environment', 'default')
    debug = getVariableValue('debug', false)
}

getAuthorizationToken {
    environment = getVariableValue('environment', 'default')
    mandant = getVariableValue('mandant', null)
    debug = getVariableValue('debug', false)
}

startLocalHttpServer {
    environment = getVariableValue('environment', 'default')
    port = getVariableValue('port', "0")
}

getDeploymentId {
    environment = getVariableValue('environment', 'default')
    debug = getVariableValue('debug', false)

    processModelName = getVariableValue("processModelName")
    processModelVersionName = getVariableValue("processModelVersionName")
}

createScheduledUndeployment {
    environment = getVariableValue('environment', 'default')
    debug = getVariableValue('debug', false)

    deploymentId = getVariableValue("deploymentId")
    undeploymentDate = getVariableValueAsLocalDate("undeploymentDate")
    undeploymentAnnounceMessageSubject = getVariableValue("undeploymentAnnounceMessageSubject")
    undeploymentAnnounceMessageBody = getVariableValue("undeploymentAnnounceMessageBody")
    undeploymentMessageSubject = getVariableValue("undeploymentMessageSubject")
    undeploymentMessageBody = getVariableValue("undeploymentMessageBody")

    undeploymentHintText = getVariableValue("undeploymentHintText")
    startToDisplayUndeploymentHint = getVariableValueAsLocalDate("startToDisplayUndeploymentHint")
}

deleteScheduledUndeployment {
    environment = getVariableValue('environment', 'default')
    debug = getVariableValue('debug', false)

    deploymentId = getVariableValue("deploymentId")
}

listScheduledUndeployments {
    environment = getVariableValue('environment', 'default')
    debug = getVariableValue('debug', false)
}


// ################ Kombinierte Tasks ################

// Fügt die Skripte zusammen und fügt sie in das Modell ein
tasks.register('mergeBuild') {
    doFirst {
        clean
    }
    dependsOn 'buildModel'
    dependsOn 'mergeScripts'
    tasks.named('buildModel') {
        mustRunAfter 'mergeScripts'
    }
}

// Fügt die Skripte zusammen, fügt sie in das Modell ein und läd
// Prozessmodelle, Formulare und Prozessparameterdefinitionen hoch
tasks.register('upload') {
    doFirst {
        clean
    }
    dependsOn 'mergeBuild'
    dependsOn 'uploadProcessModelFiles'
    dependsOn 'uploadFormularFiles'
    dependsOn 'uploadParameterDefinition'
    tasks.findByName('uploadProcessModelFiles').mustRunAfter 'buildModel'
    tasks.findByName('uploadParameterDefinition').mustRunAfter 'uploadProcessModelFiles'
}

// Fügt die Skripte zusammen, fügt sie in das Modell ein, läd
// Prozessmodelle, Formulare und Prozessparameterdefinitionen hoch
// und deployed Formulare und Prozesse
tasks.register('uploadAndDeploy') {
    doFirst {
        clean
    }
    dependsOn 'mergeBuild'
    dependsOn 'uploadProcessModelFiles'
    dependsOn 'uploadAndDeployFormularFiles'
    dependsOn 'uploadParameterDefinition'
    dependsOn 'deployProcessModelVersion'
    tasks.findByName('uploadProcessModelFiles').mustRunAfter 'buildModel'
    tasks.findByName('uploadParameterDefinition').mustRunAfter 'uploadProcessModelFiles'
    tasks.findByName('deployProcessModelVersion').mustRunAfter 'uploadParameterDefinition'
}


